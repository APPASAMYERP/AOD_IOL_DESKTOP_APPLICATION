'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.9168
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("DataSet_BPList"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class DataSet_BPList
    Inherits Global.System.Data.DataSet
    
    Private tableBPLCollectionList As BPLCollectionListDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("BPLCollectionList")) Is Nothing) Then
                MyBase.Tables.Add(New BPLCollectionListDataTable(ds.Tables("BPLCollectionList")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property BPLCollectionList() As BPLCollectionListDataTable
        Get
            Return Me.tableBPLCollectionList
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As DataSet_BPList = CType(MyBase.Clone,DataSet_BPList)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("BPLCollectionList")) Is Nothing) Then
                MyBase.Tables.Add(New BPLCollectionListDataTable(ds.Tables("BPLCollectionList")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableBPLCollectionList = CType(MyBase.Tables("BPLCollectionList"),BPLCollectionListDataTable)
        If (initTable = true) Then
            If (Not (Me.tableBPLCollectionList) Is Nothing) Then
                Me.tableBPLCollectionList.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "DataSet_BPList"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/DataSet_BPList.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableBPLCollectionList = New BPLCollectionListDataTable
        MyBase.Tables.Add(Me.tableBPLCollectionList)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeBPLCollectionList() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As DataSet_BPList = New DataSet_BPList
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub BPLCollectionListRowChangeEventHandler(ByVal sender As Object, ByVal e As BPLCollectionListRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class BPLCollectionListDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnBrand_Name As Global.System.Data.DataColumn
        
        Private columnModel_Name As Global.System.Data.DataColumn
        
        Private columnReference_Name As Global.System.Data.DataColumn
        
        Private columnGS_Code As Global.System.Data.DataColumn
        
        Private columnPower As Global.System.Data.DataColumn
        
        Private columnOptic As Global.System.Data.DataColumn
        
        Private columnLength As Global.System.Data.DataColumn
        
        Private columnLot_Unit As Global.System.Data.DataColumn
        
        Private columnA_Constatnt As Global.System.Data.DataColumn
        
        Private columnLot_No As Global.System.Data.DataColumn
        
        Private columnSrNo As Global.System.Data.DataColumn
        
        Private columnType_GS_Code As Global.System.Data.DataColumn
        
        Private columnQty As Global.System.Data.DataColumn
        
        Private columnMfdDate As Global.System.Data.DataColumn
        
        Private columnExpDate As Global.System.Data.DataColumn
        
        Private columnSterilization_No As Global.System.Data.DataColumn
        
        Private columnBPL_No As Global.System.Data.DataColumn
        
        Private columnOrd_Country As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "BPLCollectionList"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Brand_NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBrand_Name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Model_NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnModel_Name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Reference_NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnReference_Name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GS_CodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGS_Code
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PowerColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPower
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OpticColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOptic
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LengthColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLength
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Lot_UnitColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLot_Unit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property A_ConstatntColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnA_Constatnt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Lot_NoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLot_No
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SrNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSrNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Type_GS_CodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnType_GS_Code
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MfdDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMfdDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ExpDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnExpDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Sterilization_NoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSterilization_No
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BPL_NoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBPL_No
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Ord_CountryColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOrd_Country
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As BPLCollectionListRow
            Get
                Return CType(Me.Rows(index),BPLCollectionListRow)
            End Get
        End Property
        
        Public Event BPLCollectionListRowChanging As BPLCollectionListRowChangeEventHandler
        
        Public Event BPLCollectionListRowChanged As BPLCollectionListRowChangeEventHandler
        
        Public Event BPLCollectionListRowDeleting As BPLCollectionListRowChangeEventHandler
        
        Public Event BPLCollectionListRowDeleted As BPLCollectionListRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddBPLCollectionListRow(ByVal row As BPLCollectionListRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddBPLCollectionListRow( _
                    ByVal Brand_Name As String,  _
                    ByVal Model_Name As String,  _
                    ByVal Reference_Name As String,  _
                    ByVal GS_Code As String,  _
                    ByVal Power As String,  _
                    ByVal Optic As String,  _
                    ByVal Length As String,  _
                    ByVal Lot_Unit As String,  _
                    ByVal A_Constatnt As String,  _
                    ByVal Lot_No As String,  _
                    ByVal SrNo As String,  _
                    ByVal Type_GS_Code As String,  _
                    ByVal Qty As Integer,  _
                    ByVal MfdDate As String,  _
                    ByVal ExpDate As String,  _
                    ByVal Sterilization_No As String,  _
                    ByVal BPL_No As String,  _
                    ByVal Ord_Country As String) As BPLCollectionListRow
            Dim rowBPLCollectionListRow As BPLCollectionListRow = CType(Me.NewRow,BPLCollectionListRow)
            Dim columnValuesArray() As Object = New Object() {Brand_Name, Model_Name, Reference_Name, GS_Code, Power, Optic, Length, Lot_Unit, A_Constatnt, Lot_No, SrNo, Type_GS_Code, Qty, MfdDate, ExpDate, Sterilization_No, BPL_No, Ord_Country}
            rowBPLCollectionListRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowBPLCollectionListRow)
            Return rowBPLCollectionListRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As BPLCollectionListDataTable = CType(MyBase.Clone,BPLCollectionListDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New BPLCollectionListDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnBrand_Name = MyBase.Columns("Brand_Name")
            Me.columnModel_Name = MyBase.Columns("Model_Name")
            Me.columnReference_Name = MyBase.Columns("Reference_Name")
            Me.columnGS_Code = MyBase.Columns("GS_Code")
            Me.columnPower = MyBase.Columns("Power")
            Me.columnOptic = MyBase.Columns("Optic")
            Me.columnLength = MyBase.Columns("Length")
            Me.columnLot_Unit = MyBase.Columns("Lot_Unit")
            Me.columnA_Constatnt = MyBase.Columns("A_Constatnt")
            Me.columnLot_No = MyBase.Columns("Lot_No")
            Me.columnSrNo = MyBase.Columns("SrNo")
            Me.columnType_GS_Code = MyBase.Columns("Type_GS_Code")
            Me.columnQty = MyBase.Columns("Qty")
            Me.columnMfdDate = MyBase.Columns("MfdDate")
            Me.columnExpDate = MyBase.Columns("ExpDate")
            Me.columnSterilization_No = MyBase.Columns("Sterilization_No")
            Me.columnBPL_No = MyBase.Columns("BPL_No")
            Me.columnOrd_Country = MyBase.Columns("Ord_Country")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnBrand_Name = New Global.System.Data.DataColumn("Brand_Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBrand_Name)
            Me.columnModel_Name = New Global.System.Data.DataColumn("Model_Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnModel_Name)
            Me.columnReference_Name = New Global.System.Data.DataColumn("Reference_Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReference_Name)
            Me.columnGS_Code = New Global.System.Data.DataColumn("GS_Code", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGS_Code)
            Me.columnPower = New Global.System.Data.DataColumn("Power", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPower)
            Me.columnOptic = New Global.System.Data.DataColumn("Optic", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOptic)
            Me.columnLength = New Global.System.Data.DataColumn("Length", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLength)
            Me.columnLot_Unit = New Global.System.Data.DataColumn("Lot_Unit", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLot_Unit)
            Me.columnA_Constatnt = New Global.System.Data.DataColumn("A_Constatnt", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnA_Constatnt)
            Me.columnLot_No = New Global.System.Data.DataColumn("Lot_No", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLot_No)
            Me.columnSrNo = New Global.System.Data.DataColumn("SrNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSrNo)
            Me.columnType_GS_Code = New Global.System.Data.DataColumn("Type_GS_Code", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnType_GS_Code)
            Me.columnQty = New Global.System.Data.DataColumn("Qty", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQty)
            Me.columnMfdDate = New Global.System.Data.DataColumn("MfdDate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMfdDate)
            Me.columnExpDate = New Global.System.Data.DataColumn("ExpDate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnExpDate)
            Me.columnSterilization_No = New Global.System.Data.DataColumn("Sterilization_No", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSterilization_No)
            Me.columnBPL_No = New Global.System.Data.DataColumn("BPL_No", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBPL_No)
            Me.columnOrd_Country = New Global.System.Data.DataColumn("Ord_Country", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOrd_Country)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewBPLCollectionListRow() As BPLCollectionListRow
            Return CType(Me.NewRow,BPLCollectionListRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New BPLCollectionListRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(BPLCollectionListRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.BPLCollectionListRowChangedEvent) Is Nothing) Then
                RaiseEvent BPLCollectionListRowChanged(Me, New BPLCollectionListRowChangeEvent(CType(e.Row,BPLCollectionListRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.BPLCollectionListRowChangingEvent) Is Nothing) Then
                RaiseEvent BPLCollectionListRowChanging(Me, New BPLCollectionListRowChangeEvent(CType(e.Row,BPLCollectionListRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.BPLCollectionListRowDeletedEvent) Is Nothing) Then
                RaiseEvent BPLCollectionListRowDeleted(Me, New BPLCollectionListRowChangeEvent(CType(e.Row,BPLCollectionListRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.BPLCollectionListRowDeletingEvent) Is Nothing) Then
                RaiseEvent BPLCollectionListRowDeleting(Me, New BPLCollectionListRowChangeEvent(CType(e.Row,BPLCollectionListRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveBPLCollectionListRow(ByVal row As BPLCollectionListRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSet_BPList = New DataSet_BPList
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "BPLCollectionListDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class BPLCollectionListRow
        Inherits Global.System.Data.DataRow
        
        Private tableBPLCollectionList As BPLCollectionListDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableBPLCollectionList = CType(Me.Table,BPLCollectionListDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Brand_Name() As String
            Get
                Try 
                    Return CType(Me(Me.tableBPLCollectionList.Brand_NameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Brand_Name' in table 'BPLCollectionList' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBPLCollectionList.Brand_NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Model_Name() As String
            Get
                Try 
                    Return CType(Me(Me.tableBPLCollectionList.Model_NameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Model_Name' in table 'BPLCollectionList' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBPLCollectionList.Model_NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Reference_Name() As String
            Get
                Try 
                    Return CType(Me(Me.tableBPLCollectionList.Reference_NameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Reference_Name' in table 'BPLCollectionList' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBPLCollectionList.Reference_NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GS_Code() As String
            Get
                Try 
                    Return CType(Me(Me.tableBPLCollectionList.GS_CodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GS_Code' in table 'BPLCollectionList' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBPLCollectionList.GS_CodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Power() As String
            Get
                Try 
                    Return CType(Me(Me.tableBPLCollectionList.PowerColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Power' in table 'BPLCollectionList' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBPLCollectionList.PowerColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Optic() As String
            Get
                Try 
                    Return CType(Me(Me.tableBPLCollectionList.OpticColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Optic' in table 'BPLCollectionList' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBPLCollectionList.OpticColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Length() As String
            Get
                Try 
                    Return CType(Me(Me.tableBPLCollectionList.LengthColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Length' in table 'BPLCollectionList' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBPLCollectionList.LengthColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Lot_Unit() As String
            Get
                Try 
                    Return CType(Me(Me.tableBPLCollectionList.Lot_UnitColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Lot_Unit' in table 'BPLCollectionList' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBPLCollectionList.Lot_UnitColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property A_Constatnt() As String
            Get
                Try 
                    Return CType(Me(Me.tableBPLCollectionList.A_ConstatntColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'A_Constatnt' in table 'BPLCollectionList' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBPLCollectionList.A_ConstatntColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Lot_No() As String
            Get
                Try 
                    Return CType(Me(Me.tableBPLCollectionList.Lot_NoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Lot_No' in table 'BPLCollectionList' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBPLCollectionList.Lot_NoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SrNo() As String
            Get
                Try 
                    Return CType(Me(Me.tableBPLCollectionList.SrNoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SrNo' in table 'BPLCollectionList' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBPLCollectionList.SrNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Type_GS_Code() As String
            Get
                Try 
                    Return CType(Me(Me.tableBPLCollectionList.Type_GS_CodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Type_GS_Code' in table 'BPLCollectionList' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBPLCollectionList.Type_GS_CodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Qty() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableBPLCollectionList.QtyColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Qty' in table 'BPLCollectionList' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBPLCollectionList.QtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MfdDate() As String
            Get
                Try 
                    Return CType(Me(Me.tableBPLCollectionList.MfdDateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MfdDate' in table 'BPLCollectionList' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBPLCollectionList.MfdDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ExpDate() As String
            Get
                Try 
                    Return CType(Me(Me.tableBPLCollectionList.ExpDateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ExpDate' in table 'BPLCollectionList' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBPLCollectionList.ExpDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Sterilization_No() As String
            Get
                Try 
                    Return CType(Me(Me.tableBPLCollectionList.Sterilization_NoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Sterilization_No' in table 'BPLCollectionList' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBPLCollectionList.Sterilization_NoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BPL_No() As String
            Get
                Try 
                    Return CType(Me(Me.tableBPLCollectionList.BPL_NoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BPL_No' in table 'BPLCollectionList' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBPLCollectionList.BPL_NoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Ord_Country() As String
            Get
                Try 
                    Return CType(Me(Me.tableBPLCollectionList.Ord_CountryColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Ord_Country' in table 'BPLCollectionList' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBPLCollectionList.Ord_CountryColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBrand_NameNull() As Boolean
            Return Me.IsNull(Me.tableBPLCollectionList.Brand_NameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBrand_NameNull()
            Me(Me.tableBPLCollectionList.Brand_NameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsModel_NameNull() As Boolean
            Return Me.IsNull(Me.tableBPLCollectionList.Model_NameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetModel_NameNull()
            Me(Me.tableBPLCollectionList.Model_NameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsReference_NameNull() As Boolean
            Return Me.IsNull(Me.tableBPLCollectionList.Reference_NameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetReference_NameNull()
            Me(Me.tableBPLCollectionList.Reference_NameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGS_CodeNull() As Boolean
            Return Me.IsNull(Me.tableBPLCollectionList.GS_CodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGS_CodeNull()
            Me(Me.tableBPLCollectionList.GS_CodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPowerNull() As Boolean
            Return Me.IsNull(Me.tableBPLCollectionList.PowerColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPowerNull()
            Me(Me.tableBPLCollectionList.PowerColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOpticNull() As Boolean
            Return Me.IsNull(Me.tableBPLCollectionList.OpticColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOpticNull()
            Me(Me.tableBPLCollectionList.OpticColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLengthNull() As Boolean
            Return Me.IsNull(Me.tableBPLCollectionList.LengthColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLengthNull()
            Me(Me.tableBPLCollectionList.LengthColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLot_UnitNull() As Boolean
            Return Me.IsNull(Me.tableBPLCollectionList.Lot_UnitColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLot_UnitNull()
            Me(Me.tableBPLCollectionList.Lot_UnitColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsA_ConstatntNull() As Boolean
            Return Me.IsNull(Me.tableBPLCollectionList.A_ConstatntColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetA_ConstatntNull()
            Me(Me.tableBPLCollectionList.A_ConstatntColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLot_NoNull() As Boolean
            Return Me.IsNull(Me.tableBPLCollectionList.Lot_NoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLot_NoNull()
            Me(Me.tableBPLCollectionList.Lot_NoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSrNoNull() As Boolean
            Return Me.IsNull(Me.tableBPLCollectionList.SrNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSrNoNull()
            Me(Me.tableBPLCollectionList.SrNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsType_GS_CodeNull() As Boolean
            Return Me.IsNull(Me.tableBPLCollectionList.Type_GS_CodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetType_GS_CodeNull()
            Me(Me.tableBPLCollectionList.Type_GS_CodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQtyNull() As Boolean
            Return Me.IsNull(Me.tableBPLCollectionList.QtyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQtyNull()
            Me(Me.tableBPLCollectionList.QtyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMfdDateNull() As Boolean
            Return Me.IsNull(Me.tableBPLCollectionList.MfdDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMfdDateNull()
            Me(Me.tableBPLCollectionList.MfdDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsExpDateNull() As Boolean
            Return Me.IsNull(Me.tableBPLCollectionList.ExpDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetExpDateNull()
            Me(Me.tableBPLCollectionList.ExpDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSterilization_NoNull() As Boolean
            Return Me.IsNull(Me.tableBPLCollectionList.Sterilization_NoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSterilization_NoNull()
            Me(Me.tableBPLCollectionList.Sterilization_NoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBPL_NoNull() As Boolean
            Return Me.IsNull(Me.tableBPLCollectionList.BPL_NoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBPL_NoNull()
            Me(Me.tableBPLCollectionList.BPL_NoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOrd_CountryNull() As Boolean
            Return Me.IsNull(Me.tableBPLCollectionList.Ord_CountryColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOrd_CountryNull()
            Me(Me.tableBPLCollectionList.Ord_CountryColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class BPLCollectionListRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As BPLCollectionListRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As BPLCollectionListRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As BPLCollectionListRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
